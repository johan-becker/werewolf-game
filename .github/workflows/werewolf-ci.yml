name: 🐺 Werewolf Game CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  NODE_VERSION: '18.x'
  PNPM_VERSION: '8.x'

jobs:
  # Environment setup and caching
  setup:
    name: 🌙 Setup Environment
    runs-on: ubuntu-latest
    outputs:
      node-cache-key: ${{ steps.cache-keys.outputs.node }}
      pnpm-cache-key: ${{ steps.cache-keys.outputs.pnpm }}
    steps:
      - name: 🔍 Checkout werewolf repository
        uses: actions/checkout@v4

      - name: 🌕 Setup Node.js for werewolf game
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 🐾 Setup PNPM for monorepo
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 🔑 Generate cache keys
        id: cache-keys
        run: |
          echo "node=${{ runner.os }}-node-${{ hashFiles('**/package-lock.json', '**/pnpm-lock.yaml') }}" >> $GITHUB_OUTPUT
          echo "pnpm=${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}" >> $GITHUB_OUTPUT

      - name: 💾 Cache Node modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.pnpm-store
            node_modules
            packages/*/node_modules
          key: ${{ steps.cache-keys.outputs.pnpm }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: 📦 Install werewolf dependencies
        run: pnpm install --frozen-lockfile

  # Linting and code quality
  lint:
    name: 🔍 Code Quality & Linting
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: 🔍 Checkout werewolf repository
        uses: actions/checkout@v4

      - name: 🌕 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 🐾 Setup PNPM
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 💾 Restore dependencies cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.pnpm-store
            node_modules
            packages/*/node_modules
          key: ${{ needs.setup.outputs.pnpm-cache-key }}

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔍 Run ESLint on werewolf code
        run: pnpm run lint

      - name: 🎨 Check Prettier formatting
        run: pnpm run format --check

      - name: 📝 TypeScript type checking
        run: pnpm run typecheck

      - name: 🐺 Werewolf-specific code analysis
        run: |
          echo "🌕 Analyzing werewolf role implementations..."
          pnpm exec eslint packages/backend/src/services/role-strategies/ --ext .ts
          echo "🌙 Analyzing moon phase calculations..."
          pnpm exec eslint packages/backend/src/services/werewolf-*.ts --ext .ts

  # Unit and integration tests
  test:
    name: 🧪 Test Suite
    runs-on: ubuntu-latest
    needs: setup
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: werewolf_test
          POSTGRES_USER: werewolf_test
          POSTGRES_DB: werewolf_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    env:
      DATABASE_URL: postgresql://werewolf_test:werewolf_test@localhost:5432/werewolf_test
      REDIS_URL: redis://localhost:6379
      NODE_ENV: test
      JWT_SECRET: werewolf-test-secret-key
      WEREWOLF_GAME_SECRET: test-werewolf-game-secret

    steps:
      - name: 🔍 Checkout werewolf repository
        uses: actions/checkout@v4

      - name: 🌕 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 🐾 Setup PNPM
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 💾 Restore dependencies cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.pnpm-store
            node_modules
            packages/*/node_modules
          key: ${{ needs.setup.outputs.pnpm-cache-key }}

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🗃️ Setup werewolf test database
        run: |
          echo "🌕 Creating werewolf test database schema..."
          cd packages/backend
          pnpm run db:migrate
          echo "🐺 Seeding werewolf test data..."
          pnpm run db:seed:test

      - name: 🧪 Run backend unit tests
        run: |
          cd packages/backend
          pnpm run test --coverage

      - name: 🧪 Run frontend unit tests  
        run: |
          cd packages/frontend
          pnpm run test --coverage --watchAll=false

      - name: 🧪 Run shared package tests
        run: |
          cd packages/shared
          pnpm run test --coverage

      - name: 🐺 Run werewolf-specific integration tests
        run: |
          echo "🌙 Testing werewolf role strategies..."
          cd packages/backend
          pnpm run test:integration --testPathPattern="role-strategies"
          echo "🌕 Testing werewolf game mechanics..."
          pnpm run test:integration --testPathPattern="werewolf-game-manager"

      - name: 📊 Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          files: |
            ./packages/backend/coverage/lcov.info
            ./packages/frontend/coverage/lcov.info
            ./packages/shared/coverage/lcov.info
          flags: werewolf-game
          name: werewolf-coverage
          fail_ci_if_error: false

  # End-to-end testing
  e2e:
    name: 🎭 E2E Tests
    runs-on: ubuntu-latest
    needs: setup
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: werewolf_test
          POSTGRES_USER: werewolf_test
          POSTGRES_DB: werewolf_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: 🔍 Checkout werewolf repository
        uses: actions/checkout@v4

      - name: 🌕 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 🐾 Setup PNPM
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 💾 Restore dependencies cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.pnpm-store
            node_modules
            packages/*/node_modules
          key: ${{ needs.setup.outputs.pnpm-cache-key }}

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🎭 Install Playwright browsers
        run: |
          cd packages/frontend
          pnpm exec playwright install --with-deps

      - name: 🗃️ Setup E2E werewolf database
        run: |
          cd packages/backend
          DATABASE_URL=postgresql://werewolf_test:werewolf_test@localhost:5432/werewolf_test pnpm run db:migrate

      - name: 🏗️ Build werewolf applications
        run: pnpm run build

      - name: 🎭 Run Playwright E2E tests
        run: |
          cd packages/frontend
          pnpm run test:e2e
        env:
          DATABASE_URL: postgresql://werewolf_test:werewolf_test@localhost:5432/werewolf_test

      - name: 📤 Upload E2E test artifacts
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: werewolf-e2e-artifacts
          path: |
            packages/frontend/test-results/
            packages/frontend/playwright-report/
          retention-days: 7

  # Performance testing
  performance:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    needs: setup
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: werewolf_test
          POSTGRES_USER: werewolf_test
          POSTGRES_DB: werewolf_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: 🔍 Checkout werewolf repository
        uses: actions/checkout@v4

      - name: 🌕 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 🐾 Setup PNPM
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 💾 Restore dependencies cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.pnpm-store
            node_modules
            packages/*/node_modules
          key: ${{ needs.setup.outputs.pnpm-cache-key }}

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: ⚡ Install k6 for performance testing
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: 🏗️ Build and start werewolf applications
        run: |
          pnpm run build
          cd packages/backend
          DATABASE_URL=postgresql://werewolf_test:werewolf_test@localhost:5432/werewolf_test pnpm run start &
          sleep 10
        env:
          NODE_ENV: production

      - name: ⚡ Run werewolf performance tests
        run: |
          echo "🐺 Running werewolf game performance tests..."
          k6 run k6-performance-tests.js --out json=werewolf-performance-results.json
        env:
          BASE_URL: http://localhost:8000
          WS_URL: ws://localhost:8000

      - name: 📊 Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: werewolf-performance-results
          path: werewolf-performance-results.json

  # Security scanning
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: 🔍 Checkout werewolf repository
        uses: actions/checkout@v4

      - name: 🌕 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 🐾 Setup PNPM
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 💾 Restore dependencies cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.pnpm-store
            node_modules
            packages/*/node_modules
          key: ${{ needs.setup.outputs.pnpm-cache-key }}

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔒 Run npm audit for werewolf dependencies
        run: |
          echo "🐺 Auditing werewolf game dependencies..."
          pnpm audit --audit-level moderate
          
      - name: 🔍 Run CodeQL analysis
        uses: github/codeql-action/init@v2
        with:
          languages: javascript,typescript

      - name: 🏗️ Build for CodeQL analysis
        run: pnpm run build

      - name: 🔍 Perform CodeQL analysis
        uses: github/codeql-action/analyze@v2

      - name: 🐺 Werewolf-specific security checks
        run: |
          echo "🌙 Checking for hardcoded werewolf secrets..."
          grep -r "werewolf.*secret\|pack.*password\|alpha.*key" packages/ --include="*.ts" --include="*.js" || echo "No hardcoded secrets found"
          echo "🌕 Validating JWT token handling..."
          grep -r "jwt.*secret" packages/ --include="*.ts" --include="*.js" | grep -v "process.env" && exit 1 || echo "JWT secrets properly handled"

  # Build and deployment
  build:
    name: 🏗️ Build Applications
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: github.event_name == 'push'
    steps:
      - name: 🔍 Checkout werewolf repository
        uses: actions/checkout@v4

      - name: 🌕 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 🐾 Setup PNPM
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 💾 Restore dependencies cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.pnpm-store
            node_modules
            packages/*/node_modules
          key: ${{ needs.setup.outputs.pnpm-cache-key }}

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🏗️ Build werewolf applications
        run: pnpm run build

      - name: 📦 Archive werewolf build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: werewolf-build-artifacts
          path: |
            packages/backend/dist/
            packages/frontend/.next/
            packages/shared/dist/
          retention-days: 7

  # Docker build and push
  docker:
    name: 🐳 Docker Build & Push
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: 🔍 Checkout werewolf repository
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔑 Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 📦 Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: werewolf-build-artifacts

      - name: 🐺 Build and push werewolf backend image
        uses: docker/build-push-action@v5
        with:
          context: ./packages/backend
          push: true
          tags: |
            werewolfgame/backend:latest
            werewolfgame/backend:${{ github.sha }}
          labels: |
            org.opencontainers.image.title=Werewolf Game Backend
            org.opencontainers.image.description=Backend API for werewolf multiplayer game
            org.opencontainers.image.source=${{ github.repositoryUrl }}
            org.opencontainers.image.revision=${{ github.sha }}

      - name: 🌙 Build and push werewolf frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./packages/frontend
          push: true
          tags: |
            werewolfgame/frontend:latest
            werewolfgame/frontend:${{ github.sha }}
          labels: |
            org.opencontainers.image.title=Werewolf Game Frontend
            org.opencontainers.image.description=React frontend for werewolf multiplayer game
            org.opencontainers.image.source=${{ github.repositoryUrl }}
            org.opencontainers.image.revision=${{ github.sha }}

  # Deployment notification
  notify:
    name: 📢 Deployment Notification
    runs-on: ubuntu-latest
    needs: [build, docker, e2e, security]
    if: always()
    steps:
      - name: 🐺 Calculate deployment status
        id: status
        run: |
          if [[ "${{ needs.build.result }}" == "success" && "${{ needs.docker.result }}" == "success" && "${{ needs.e2e.result }}" == "success" && "${{ needs.security.result }}" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "emoji=🌕" >> $GITHUB_OUTPUT
            echo "message=Werewolf game deployed successfully! The pack is ready to hunt." >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "emoji=🌑" >> $GITHUB_OUTPUT
            echo "message=Werewolf deployment failed. The pack remains scattered." >> $GITHUB_OUTPUT
          fi

      - name: 📢 Notify deployment status
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          echo "${{ steps.status.outputs.emoji }} ${{ steps.status.outputs.message }}"
          echo "🔗 Commit: ${{ github.sha }}"
          echo "👤 Actor: ${{ github.actor }}"
          echo "📅 Time: $(date)"