// Werewolf Game Database Schema - Supabase Compatible
// PostgreSQL database with Prisma ORM aligned to Supabase auth

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum GameStatus {
  WAITING
  IN_PROGRESS
  FINISHED
}

enum GamePhase {
  DAY
  NIGHT
}

enum PlayerRole {
  WEREWOLF
  VILLAGER
  SEER
  DOCTOR
  HUNTER
}

enum ChatChannel {
  LOBBY
  DAY
  NIGHT
  DEAD
  SYSTEM
}

enum MessageType {
  TEXT
  SYSTEM
  JOIN
  LEAVE
  DEATH
  ROLE_REVEAL
}

// Profile entity - linked to Supabase auth.users
model Profile {
  id            String    @id @db.Uuid // References auth.users(id)
  username      String?   @unique @db.VarChar(50)
  full_name     String?   @db.VarChar(100)
  avatar_url    String?   @db.VarChar(500)
  updated_at    DateTime? @updatedAt @db.Timestamptz
  created_at    DateTime  @default(now()) @db.Timestamptz

  // Game statistics
  games_played  Int       @default(0)
  games_won     Int       @default(0)
  
  // Relations
  created_games Game[]         @relation("GameCreator")
  players       Player[]
  game_logs     GameLog[]
  chat_messages ChatMessage[]

  @@map("profiles")
  @@index([username])
  @@index([created_at])
}

// Game entity - represents game rooms
model Game {
  id               String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name             String     @db.VarChar(100)
  code             String     @unique @db.VarChar(6)
  status           GameStatus @default(WAITING)
  phase            GamePhase? 
  max_players      Int        @default(12)
  current_players  Int        @default(0)
  game_settings    Json       @db.JsonB
  creator_id       String     @db.Uuid
  created_at       DateTime   @default(now()) @db.Timestamptz
  started_at       DateTime?  @db.Timestamptz
  finished_at      DateTime?  @db.Timestamptz
  updated_at       DateTime   @updatedAt @db.Timestamptz

  // Relations
  creator          Profile    @relation("GameCreator", fields: [creator_id], references: [id], onDelete: Cascade)
  players          Player[]
  game_logs        GameLog[]
  chat_messages    ChatMessage[]

  @@map("games")
  @@index([code])
  @@index([status])
  @@index([creator_id])
  @@index([created_at])
}

// Player entity - represents a user's participation in a specific game
model Player {
  user_id       String      @db.Uuid
  game_id       String      @db.Uuid
  role          PlayerRole?
  is_alive      Boolean     @default(true)
  is_host       Boolean     @default(false)
  joined_at     DateTime    @default(now()) @db.Timestamptz
  eliminated_at DateTime?   @db.Timestamptz
  votes_cast    Int         @default(0)
  
  // Relations
  user          Profile     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  game          Game        @relation(fields: [game_id], references: [id], onDelete: Cascade)
  game_logs     GameLog[]

  @@id([user_id, game_id])
  @@map("players")
  @@index([game_id])
  @@index([user_id])
}

// Game log for audit trail and game history
model GameLog {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  game_id    String   @db.Uuid
  user_id    String?  @db.Uuid
  player_id  String?  @db.Uuid // Composite key reference
  action     String   @db.VarChar(100)
  details    Json?    @db.JsonB
  phase      GamePhase?
  day_number Int?
  created_at DateTime @default(now()) @db.Timestamptz

  // Relations
  game       Game     @relation(fields: [game_id], references: [id], onDelete: Cascade)
  user       Profile? @relation(fields: [user_id], references: [id], onDelete: SetNull)
  player     Player?  @relation(fields: [player_id, game_id], references: [user_id, game_id], onDelete: SetNull)

  @@map("game_logs")
  @@index([game_id])
  @@index([user_id])
  @@index([created_at])
}

// Chat message for persistent chat history
model ChatMessage {
  id          String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  game_id     String?     @db.Uuid // null for lobby messages
  user_id     String      @db.Uuid
  channel     ChatChannel
  type        MessageType @default(TEXT)
  content     String      @db.Text
  mentions    String[]    @default([]) // Array of mentioned usernames
  edited      Boolean     @default(false)
  edited_at   DateTime?   @db.Timestamptz
  created_at  DateTime    @default(now()) @db.Timestamptz

  // Relations
  game        Game?       @relation(fields: [game_id], references: [id], onDelete: Cascade)
  user        Profile     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("chat_messages")
  @@index([game_id])
  @@index([user_id])
  @@index([channel])
  @@index([created_at])
  @@index([type])
}